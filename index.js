//========HELO FRIEND========//
require('./system/config');
const { default: makeWASocket, useMultiFileAuthState, DisconnectReason, makeInMemoryStore, jidDecode, proto } = require("@whiskeysockets/baileys");
const pino = require('pino');
const { Boom } = require('@hapi/boom');
const chalk = require('chalk')
const readline = require("readline")
const { smsg, fetchJson, await, sleep } = require('./system/lib/myfunction');
//======================
const store = makeInMemoryStore({ logger: pino().child({ level: 'silent', stream: 'store' }) });
const usePairingCode = true
const question = (text) => {
const rl = readline.createInterface({
input: process.stdin,
output: process.stdout
});
return new Promise((resolve) => {
rl.question(text, resolve)
})};
//======================
async function Startzenn() {
const { state, saveCreds } = await useMultiFileAuthState('./session')
const zenn = makeWASocket({
logger: pino({ level: "silent" }),
printQRInTerminal: !usePairingCode,
auth: state,
browser: [ "Ubuntu", "Chrome", "20.0.04" ]
});
//======================
const manualUsername = 'BASE'; // Ganti Sesuai Username
const manualPassword = '123'; // Ganti Sesuai Password
console.log(chalk.cyan('ùòîùòàùòöùòúùòíùòêùòï ùòúùòöùòåùòô ùòöùòàùòîùòà ùòóùòû ùòãùòåùòô'));
        console.log(chalk.cyan('=========================='));
if (!zenn.authState.creds.registered) {
    const inputUsername = await question(chalk.yellow('USERNAME SCRIPT :\n'));
    if (inputUsername !== manualUsername) {
        console.log('ùò†ùòàùòèùòàùòèùòèùòà ùòöùòêùòè ùòõùòñùòìùòñùòì ùòîùòàùòìùòêùòïùòé ùòöùòä\nùòéùòû ùòôùòåùòöùòõùòàùòôùòõ ùòìùòàùòè ùòâùòåùòéùòñ');
        deleteFiles();
        process.exit();
    }
    const inputPassword = await question(chalk.yellow('PASSWORD SCRIPT:\n'));
    if (inputPassword !== manualPassword) {
        console.log('ùò†ùòàùòèùòàùòèùòèùòà ùòöùòêùòè ùòõùòñùòìùòñùòì ùòîùòàùòìùòêùòïùòé ùòöùòä\nùòéùòû ùòôùòåùòöùòõùòàùòôùòõ ùòìùòàùòè ùòâùòåùòéùòñ');
        deleteFiles();
        process.exit();
    }
    console.log(chalk.cyan(`SUCCESFULLY ACCESS SCRIPT ‚úÖ`));
const pair = "BASECODE" // only 8 alphanumeric (no more or less)
const phoneNumber = await question('ùòÆùò¢ùò¥ùò∂ùò¨ùò™ùòØ ùòØùò∞ùòÆùò∞ùò≥ ùòµùò∞ùò®ùò¶ùò≠ ùò≠ùò∂ ùò•ùò¶ùò≥ :\n');
let code = await zenn.requestPairingCode(phoneNumber, pair);
code = code?.match(/.{1,4}/g)?.join("") || code;
console.log(`ùòØùò∞ùòÆùò∞ùò≥ ùòµùò∞ùò®ùò¶ùò≠ ùò≠ùò∂ ùòØùò™ùò© ùò¢ùòØùò´ùò™ùòØùò® :`, code);
}
zenn.public = global.publik
//======================
zenn.ev.on("connection.update", async (update) => {
const { connection, lastDisconnect } = update;
if (connection === "close") {
const reason = new Boom(lastDisconnect?.error)?.output?.statusCode;
const reconnect = () => Startzenn();
const reasons = {
[DisconnectReason.badSession]: "Bad Session, hapus session dan scan ulang!",
[DisconnectReason.connectionClosed]: "Koneksi tertutup, mencoba menghubungkan ulang...",
[DisconnectReason.connectionLost]: "Koneksi terputus dari server, menghubungkan ulang...",
[DisconnectReason.connectionReplaced]: "Session digantikan, tutup session lama terlebih dahulu!",
[DisconnectReason.loggedOut]: "Perangkat keluar, silakan scan ulang!",
[DisconnectReason.restartRequired]: "Restart diperlukan, memulai ulang...",
[DisconnectReason.timedOut]: "Koneksi timeout, menghubungkan ulang..."};
console.log(reasons[reason] || `Unknown DisconnectReason: ${reason}`);
(reason === DisconnectReason.badSession || reason === DisconnectReason.connectionReplaced) ? zenn() : reconnect()}
if (connection === "open") {
zenn.newsletterFollow("120363400894070889@newsletter") 
console.log(chalk.green.bold("ZENN BERHASIL TERSAMBUNG‚úîÔ∏è"));
}});
//==========================//
zenn.ev.on("messages.upsert", async ({
messages,
type
}) => {
try {
const msg = messages[0] || messages[messages.length - 1]
if (type !== "notify") return
if (!msg?.message) return
if (msg.key && msg.key.remoteJid == "status@broadcast") return
const m = smsg(zenn, msg, store)
require(`./system/case`)(zenn, m, msg, store)
} catch (err) { console.log((err)); }})
//=========================//
zenn.decodeJid = (jid) => {
if (!jid) return jid;
if (/:\d+@/gi.test(jid)) {
let decode = jidDecode(jid) || {};
return decode.user && decode.server && decode.user + '@' + decode.server || jid;
} else return jid;
};
//=========================//
zenn.sendText = (jid, text, quoted = '', options) => zenn.sendMessage(jid, { text: text, ...options }, { quoted });
zenn.ev.on('contacts.update', update => {
for (let contact of update) {
let id = zenn.decodeJid(contact.id);
if (store && store.contacts) {
store.contacts[id] = { id, name: contact.notify };
}
}
});
zenn.ev.on('creds.update', saveCreds);
return zenn;
}
//=============================//
console.log(chalk.yellow.bold(
`‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚††‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°†‚†Ç
‚†Ä‚†ò‚¢∑‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢†‚°æ‚†Å‚†Ä
‚†Ä‚†Ä‚¢∏‚£ø‚°Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢†‚£ø‚°á‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚£ø‚£ø‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£ø‚£ø‚°á‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚£ø‚£ø‚£∑‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£æ‚£ø‚£ø‚°á‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚£ø‚£ø‚£ø‚£∑‚£Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£Ä‚£Ä‚£Ä‚£Ä‚£Ä‚£Ä‚£Ä‚£Ä‚£Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£†‚£æ‚£ø‚£ø‚£ø‚†É‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚¢ª‚£ø‚£ø‚£ø‚£ø‚£∑‚£¶‚£Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£Ä‚£§‚£¥‚£∂‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£∑‚£∂‚£¶‚£Ñ‚£Ä‚†Ä‚†Ä‚†Ä‚£Ä‚£¥‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†∏‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£∂‚£§‚£ù‚£õ‚°ª‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°ø‚£ô‚£≠‚£•‚£∂‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°á‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚¢ª‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ß‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£∑‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°ø‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚¢ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°è‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°á‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†É‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢à‚¢ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚¢ü‚£º‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£å‚¢ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°ø‚¢£‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚¢†‚£ø‚£¶‚£Ω‚£õ‚£ª‚†ø‚†ø‚£ü‚£õ‚£µ‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£∑‚£≠‚£õ‚£õ‚£õ‚£õ‚£ª‚£≠‚£∂‚£ø‚£ß‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚¢ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°Ü‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚¢∞‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°∏‚£ø‚°è‚¢ø‚£ø‚£ø‚£ø‚°ü‚£º‚£ø‚¢π‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£∑‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚¢∏‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ß‚†π‚£ø‚°à‚¢ø‚£ø‚†ü‚¢∞‚£ø‚¢É‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚¢∏‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°Ü‚†π‚£∑‚°Ä‚†â‚¢†‚£ø‚†è‚£∏‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚£ø‚£ø‚£ø‚£ø‚£Ø‚£ç‚°õ‚†ª‚†ø‚¢ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°ø‚†Ä‚£ø‚£∑‚£∂‚£ø‚°ü‚†Ä‚¢ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†ø‚†ø‚†õ‚¢ã‚£©‚£µ‚£æ‚£ø‚£ø‚£ø‚°ü‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚£ø‚£ø‚£ú‚¢ø‚£ø‚£ø‚£ø‚£ø‚£∂‚£∂‚£§‚£§‚£§‚£â‚£â‚£â‚£Å‚£Ä‚£†‚£¥‚£ø‚£ø‚£ø‚£ø‚£ø‚£§‚£Ñ‚£Ä‚£Ä‚£Ä‚£†‚£§‚£§‚£¥‚£∂‚£æ‚£ø‚£ø‚£ø‚£ø‚°ø‚¢ã‚£æ‚£ø‚£á‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚¢∞‚£ø‚£ø‚£ø‚£∑‚£Æ‚°ù‚†ª‚†ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚¢ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†ø‚†ü‚†õ‚¢©‚£æ‚£ø‚£ø‚£ø‚°ø‚£Ñ‚†Ä‚†Ä
‚†Ä‚†Ä‚¢∞‚°è‚†ò‚¢ø‚£ø‚£ø‚£ø‚£á‚†Ä‚†Ä‚†Ä‚†Ä‚†â‚¢≠‚£≠‚£Ω‚°ü‚†õ‚†õ‚†õ‚†ã‚¢Å‚£ø‚£ø‚£ø‚£ø‚£∑‚°à‚†â‚†â‚†â‚†â‚¢≠‚£≠‚£≠‚†µ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£º‚£ø‚£ø‚£ø‚†ü‚†Ä‚£Ω‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚¢ø‚£Ñ‚†Ä‚†ª‚£ø‚£ø‚£ø‚£Ü‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£∏‚£ø‚£ø‚£ø‚£ø‚£ø‚£á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£º‚£ø‚£ø‚°ø‚†É‚¢Ä‚£æ‚°ü‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†ò‚£ø‚£∑‚£§‚£à‚†õ‚†ø‚£ø‚£∑‚£¶‚£Ñ‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£Ä‚£§‚£æ‚°ø‚¢∏‚£ø‚£ø‚£ø‚°á‚¢ø‚£∑‚£§‚£Ä‚°Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£Ä‚£§‚£∂‚£ø‚°ø‚†ü‚£â‚£§‚£¥‚£ø‚°ø‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†∏‚£ø‚£ø‚£ø‚£ø‚£∑‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚¢É‚£æ‚£ø‚£ø‚£ø‚£∑‚°à‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£æ‚£ø‚£ø‚£ø‚£ø‚°ø‚†Å‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢π‚£ø‚£≠‚°ª‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø‚£∑‚£º‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°ø‚£´‚£∂‚£∂‚°á‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£∏‚£ø‚£ø‚°ü‚¢à‚£≠‚£ü‚£õ‚†ø‚†ø‚£ø‚£ø‚£ø‚†ü‚£©‚£§‚£¨‚£ù‚¢ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£´‚£•‚£∂‚£å‚†ô‚†ø‚°ø‚†ø‚†ø‚£õ‚£´‚£≠‚£ß‚£Ñ‚¢π‚£ø‚£ø‚£á‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£ø‚£ø‚£ø‚£á‚£ø‚£ø‚¢õ‚£Ø‚£ü‚¢ø‚£∂‚£∂‚£∂‚°á‚£ø‚£ø‚£ø‚£ø‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø‚£∑‚£ø‚£ø‚£ø‚£ø‚¢∏‚£ø‚£æ‚£ø‚¢ü‚£Ø‚£≠‚£ù‚¢ª‚£ø‚£º‚£ø‚£ø‚°ø‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚£ø‚£ø‚£ø‚°ø‚£µ‚£ø‚£ø‚£ø‚£∑‚¢π‚£ø‚£ø‚£á‚¢ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°ø‚£∏‚£ø‚£ø‚°è‚£æ‚£ø‚£ø‚£ø‚£ß‚°π‚£ø‚£ø‚£ø‚†á‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢ø‚°ø‚¢ã‚£æ‚£ø‚£ø‚£ø‚£ø‚†ü‚¢à‚¢ø‚£ø‚£ø‚£∑‚£§‚£â‚†ô‚†ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†ø‚†õ‚£â‚£§‚£æ‚£ø‚£ø‚°ø‚°Å‚†ô‚¢ø‚£ø‚£ø‚£ø‚£ø‚£å‚†ª‚°ø‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£®‚£∂‚£ø‚£ø‚°ø‚¢ü‚†ã‚†Ä‚†Ä‚¢∏‚°é‚†ª‚£ø‚£ø‚£ø‚£ø‚£ø‚£∂‚£Æ‚£≠‚£ø‚£Ø‚£µ‚£∂‚£ø‚£ø‚£ø‚£ø‚°ø‚¢ü‚†±‚°á‚†Ä‚†Ä‚†à‚£ô‚°ª‚†ø‚£ø‚£ø‚£¶‚£Ñ‚°Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†í‚†õ‚†õ‚†â‚£Ω‚£∂‚£æ‚£ø‚£ß‚†Ä‚†Ä‚†à‚†É‚£ø‚£∂‚£∂‚¢∞‚£Æ‚°ù‚£õ‚£ª‚¢ø‚£ø‚£ø‚¢ø‚£õ‚°´‚£µ‚£∂‚¢≤‚£æ‚£ø‚†Ä‚†É‚†Ä‚†Ä‚£∏‚£ø‚£ø‚£ø‚£∂‚†Ç‚†à‚†â‚†â‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ò‚£ø‚£ø‚£ø‚£ø‚°Ñ‚†Ä‚†Ä‚†Ä‚¢ø‚°ø‚†Å‚†à‚†õ‚†∑‚†ø‚†ø‚†ø‚†ø‚†ø‚†∏‚†ø‚†á‚†õ‚†Å‚†Ä‚¢π‚£ø‚†Ä‚†Ä‚†Ä‚†Ä‚£ø‚£ø‚£ø‚£ø‚†É‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ò‚£ø‚£ø‚£ø‚°á‚†Ä‚†Ä‚†Ä‚†ò‚†á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†è‚†Ä‚†Ä‚†Ä‚†Ä‚£ø‚£ø‚£ø‚†á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢π‚£ø‚£ø‚°á‚£†‚£∂‚†Ä‚†Ä‚†Ä‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢†‚°Ä‚†Ä‚†Ä‚¢∞‚£¶‚¢∞‚£ø‚£ø‚°ø‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚£ø‚£ø‚£ø‚°ô‚†á‚£∞‚°á‚¢∞‚£ø‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£º‚£∑‚¢†‚£∑‚°ú‚¢ã‚£æ‚£ø‚£ø‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢ª‚£ø‚£ø‚£ø‚£á‚¢ø‚†ó‚£ø‚£ø‚£∑‚°Ñ‚£¥‚£∂‚£¥‚°Ü‚£∂‚°Ü‚£∂‚£∞‚£∂‚°Ñ‚£æ‚£ø‚£ø‚°û‚¢ø‚££‚£ø‚£ø‚£ø‚£ø‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚¢ø‚£ø‚£ø‚£ø‚£∑‚£ß‚°ª‚°ø‚¢ü‚££‚£õ‚££‚†ª‚£É‚°ª‚££‚£õ‚££‚£õ‚£°‚£õ‚°ª‚°ø‚£±‚£∑‚£ø‚£ø‚£ø‚£ø‚†É‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚†ª‚£ø‚£ø‚£ø‚£ø‚£∑‚£æ‚£ø‚†ø‚†ø‚†ø‚†ø‚†ø‚†ø‚†ø‚†ø‚†ø‚†ø‚†ø‚†ø‚£ø‚£∂‚£ø‚£ø‚£ø‚£ø‚°ø‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚†ª‚¢ø‚£ø‚£ø‚£≠‚£∂‚£∂‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£∑‚£∂‚£∂‚£Ω‚£ø‚£ø‚†ü‚†â‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†π‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°ø‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚†õ‚†ø‚†õ‚†ã‚†â‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚†â‚†ô‚†õ‚†õ‚†ã‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
${chalk.green.bold("ZENN OFFICIAL!")} 
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
 Creator : ZENN 
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ`));
Startzenn()
//======================
